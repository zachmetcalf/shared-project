################################################################################################################################################################
## CMakeLists.txt
##
## Zach Metcalf
################################################################################################################################################################

cmake_minimum_required(VERSION 3.25)

project(shared_project LANGUAGES CXX VERSION 1.0)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/scripts/cmake)

include(shared_macros)

shared_message("configuring shared workspace...")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(PLATFORM_WINDOWS WIN32 CACHE INTERNAL "is platform windows?")
set(PLATFORM_MACOSX APPLE CACHE INTERNAL "is platform apple?")
set(COMPILER_MSVC (CMAKE_CXX_COMPILER_ID MATCHES "MSVC") CACHE INTERNAL "is compiler msvc?")
set(COMPILER_CLANG (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang") CACHE INTERNAL "is compiler clang?")

set(BINARY_DIRECTORY ${CMAKE_SOURCE_DIR}/bin CACHE PATH "binary directory")
set(INSTALL_DIRECTORY ${CMAKE_SOURCE_DIR}/install CACHE PATH "install directory")
set(DATA_DIRECTORY ${CMAKE_SOURCE_DIR}/data CACHE PATH "data directory")
set(3RDPARTY_DIRECTORY ${CMAKE_SOURCE_DIR}/../3rdparty CACHE PATH "3rdparty directory")
set(3RDPARTY_SOURCE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty CACHE PATH "3rdparty source output directory")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BINARY_DIRECTORY})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BINARY_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BINARY_DIRECTORY})

set(BUILD_SHARED_DEMOS ON CACHE BOOL "build shared demos?")
set(BUILD_SHARED_TEMPLATES ON CACHE BOOL "build shared templates?")

shared_message("configuring platform...")

if (${PLATFORM_WINDOWS})
	shared_message("finding toolchain...")

	if (DEFINED WINDOWS_TOOLCHAIN_FILE)
		set(CMAKE_TOOLCHAIN_FILE ${WINDOWS_TOOLCHAIN_FILE} CACHE PATH "cmake toolchain file")
		include(${CMAKE_TOOLCHAIN_FILE})
	elseif (NOT DEFINED CMAKE_TOOLCHAIN_FILE)
		get_filename_component(LOCAL_TOOLCHAIN_FILE "${CMAKE_SOURCE_DIR}/../3rdparty/vcpkg/scripts/buildsystems/vcpkg.cmake" ABSOLUTE)
		set(CMAKE_TOOLCHAIN_FILE ${LOCAL_TOOLCHAIN_FILE} CACHE PATH "cmake toolchain file")
		include(${CMAKE_TOOLCHAIN_FILE})
	endif()

	shared_message("using toolchain: ${CMAKE_TOOLCHAIN_FILE}")
else()
	shared_message("finding openssl...")

	if (DEFINED MACOSX_OPENSSL_ROOT_DIR)
		set(OPENSSL_ROOT_DIR ${MACOSX_OPENSSL_ROOT_DIR} CACHE PATH "openssl root dir")
	endif()

	shared_message("using openssl: ${OPENSSL_ROOT_DIR}")
	shared_message("finding curl...")

	if (DEFINED MACOSX_CURL_ROOT_DIR)
		set(CURL_ROOT_DIR ${MACOSX_CURL_ROOT_DIR} CACHE PATH "curl root dir")
	endif()

	shared_message("using curl: ${CURL_ROOT_DIR}")
endif()

shared_message("configuring defines...")

add_compile_definitions(
PUBLIC
	$<$<CONFIG:Debug>:__CONFIGURATION_DEBUG>
	$<$<CONFIG:Release>:__CONFIGURATION_RELEASE>
	$<$<PLATFORM_ID:Windows>:__PLATFORM_WINDOWS>
	$<$<PLATFORM_ID:Darwin>:__PLATFORM_MACOSX>
)

if (${PLATFORM_WINDOWS})
	add_compile_definitions(NOMINMAX)
elseif (${PLATFORM_MACOSX})
endif()

shared_message("configuring warnings...")

if (${COMPILER_MSVC})
	add_compile_options(/W4)
	add_compile_options(/WX)
elseif (${COMPILER_CLANG})
	add_compile_options(-Wall -Wextra -Wpedantic)
	add_compile_options(-Werror)
endif()

shared_message("configuring rtti...")

if (${COMPILER_MSVC})
	add_compile_options(/GR-)
elseif (${COMPILER_CLANG})
	add_compile_options(-fno-rtti)
endif()

shared_message("configuring 3rdparty libraries...")

include(3rdparty/catch)
include(3rdparty/cpprest)
include(3rdparty/curl)
include(3rdparty/dirent)
include(3rdparty/imgui)
include(3rdparty/implot)
include(3rdparty/rapidjson)
include(3rdparty/stb)

shared_message("configuring shared libraries...")

add_subdirectory(source/data/fonts)
add_subdirectory(source/data/resources)
add_subdirectory(source/libraries/catch_ext)
add_subdirectory(source/libraries/cpprest_ext)
add_subdirectory(source/libraries/curl_ext)
add_subdirectory(source/libraries/imgui_ext)
add_subdirectory(source/libraries/rapidjson_ext)
add_subdirectory(source/libraries/shared)
add_subdirectory(source/libraries/slack_ext)

if (${BUILD_SHARED_DEMOS})
	shared_message("configuring shared demos...")

	add_subdirectory(source/projects/console_demo)
	add_subdirectory(source/projects/imgui_demo)
	add_subdirectory(source/projects/test_demo)
endif()

if (${BUILD_SHARED_TEMPLATES})
	shared_message("configuring shared templates...")

	add_subdirectory(source/projects/console_template)
	add_subdirectory(source/projects/imgui_template)
	add_subdirectory(source/projects/test_template)
endif()
